'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pathToRegexp = require('path-to-regexp');

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

var _createHistory = require('./create-history');

var _createHistory2 = _interopRequireDefault(_createHistory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createRouter = function createRouter(Comp) {
  var Router = function (_React$Component) {
    _inherits(Router, _React$Component);

    function Router(_ref) {
      var routes = _ref.routes;
      var pathname = _ref.pathname;

      _classCallCheck(this, Router);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Router).call(this));

      _this.state = {
        history: {},
        route: _this.getRoute.bind(_this)(routes, { pathname: pathname })
      };
      _this.unlisten = function () {};
      _this.getRoute = _this.getRoute.bind(_this);
      return _this;
    }

    _createClass(Router, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return this.state;
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var history = (0, _createHistory2.default)();
        var route = this.getRoute(this.props.routes, window.location);
        this.setState({
          history: history,
          route: route
        });
        this.unlisten = history.listen(this.handleHistoryChange.bind(this));
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unlisten();
      }
    }, {
      key: 'handleHistoryChange',
      value: function handleHistoryChange(location) {
        var route = this.getRoute(this.props.routes, location);
        this.setState({ route: route });
      }
    }, {
      key: 'getRoute',
      value: function getRoute(routes, location) {
        var pathname = location.pathname;

        var keys = [];
        var params = {};

        var route = routes.reduce(function (a, b) {
          var reg = (0, _pathToRegexp2.default)(b.path, keys);
          var match = reg.test(pathname);
          if (match) {
            var _ret = function () {
              var tokens = reg.exec(pathname);
              keys.forEach(function (key, i) {
                params[key.name] = tokens[i + 1];
              });
              return {
                v: b
              };
            }();

            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
          }
          return a;
        }, null) || {};

        route.params = params;
        return route;
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Comp, _extends({}, this.props, this.state));
      }
    }]);

    return Router;
  }(_react2.default.Component);

  Router.propTypes = {
    pathname: _react2.default.PropTypes.string,
    routes: _react2.default.PropTypes.array
  };

  Router.defaultProps = {
    routes: []
  };

  Router.childContextTypes = {
    history: _react2.default.PropTypes.object,
    route: _react2.default.PropTypes.object
  };

  return Router;
};

exports.default = createRouter;